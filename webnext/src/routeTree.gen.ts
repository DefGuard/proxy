/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as TestRouteImport } from './routes/test'
import { Route as IndexRouteImport } from './routes/index'
import { Route as PasswordIndexRouteImport } from './routes/password/index'
import { Route as PasswordSentRouteImport } from './routes/password/sent'
import { Route as PasswordFormRouteImport } from './routes/password/form'

const TestRoute = TestRouteImport.update({
  id: '/test',
  path: '/test',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const PasswordIndexRoute = PasswordIndexRouteImport.update({
  id: '/password/',
  path: '/password/',
  getParentRoute: () => rootRouteImport,
} as any)
const PasswordSentRoute = PasswordSentRouteImport.update({
  id: '/password/sent',
  path: '/password/sent',
  getParentRoute: () => rootRouteImport,
} as any)
const PasswordFormRoute = PasswordFormRouteImport.update({
  id: '/password/form',
  path: '/password/form',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/test': typeof TestRoute
  '/password/form': typeof PasswordFormRoute
  '/password/sent': typeof PasswordSentRoute
  '/password': typeof PasswordIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/test': typeof TestRoute
  '/password/form': typeof PasswordFormRoute
  '/password/sent': typeof PasswordSentRoute
  '/password': typeof PasswordIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/test': typeof TestRoute
  '/password/form': typeof PasswordFormRoute
  '/password/sent': typeof PasswordSentRoute
  '/password/': typeof PasswordIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/test' | '/password/form' | '/password/sent' | '/password'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/test' | '/password/form' | '/password/sent' | '/password'
  id:
    | '__root__'
    | '/'
    | '/test'
    | '/password/form'
    | '/password/sent'
    | '/password/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  TestRoute: typeof TestRoute
  PasswordFormRoute: typeof PasswordFormRoute
  PasswordSentRoute: typeof PasswordSentRoute
  PasswordIndexRoute: typeof PasswordIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/test': {
      id: '/test'
      path: '/test'
      fullPath: '/test'
      preLoaderRoute: typeof TestRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/password/': {
      id: '/password/'
      path: '/password'
      fullPath: '/password'
      preLoaderRoute: typeof PasswordIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/password/sent': {
      id: '/password/sent'
      path: '/password/sent'
      fullPath: '/password/sent'
      preLoaderRoute: typeof PasswordSentRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/password/form': {
      id: '/password/form'
      path: '/password/form'
      fullPath: '/password/form'
      preLoaderRoute: typeof PasswordFormRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  TestRoute: TestRoute,
  PasswordFormRoute: PasswordFormRoute,
  PasswordSentRoute: PasswordSentRoute,
  PasswordIndexRoute: PasswordIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
