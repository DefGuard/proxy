/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as TestRouteImport } from './routes/test'
import { Route as SessionEndRouteImport } from './routes/session-end'
import { Route as PasswordResetRouteImport } from './routes/password-reset'
import { Route as EnrollmentStartRouteImport } from './routes/enrollment-start'
import { Route as DownloadRouteImport } from './routes/download'
import { Route as ClientSetupRouteImport } from './routes/client-setup'
import { Route as IndexRouteImport } from './routes/index'
import { Route as PasswordIndexRouteImport } from './routes/password/index'
import { Route as PasswordSentRouteImport } from './routes/password/sent'
import { Route as PasswordFinishRouteImport } from './routes/password/finish'
import { Route as OpenidCallbackRouteImport } from './routes/openid/callback'

const TestRoute = TestRouteImport.update({
  id: '/test',
  path: '/test',
  getParentRoute: () => rootRouteImport,
} as any)
const SessionEndRoute = SessionEndRouteImport.update({
  id: '/session-end',
  path: '/session-end',
  getParentRoute: () => rootRouteImport,
} as any)
const PasswordResetRoute = PasswordResetRouteImport.update({
  id: '/password-reset',
  path: '/password-reset',
  getParentRoute: () => rootRouteImport,
} as any)
const EnrollmentStartRoute = EnrollmentStartRouteImport.update({
  id: '/enrollment-start',
  path: '/enrollment-start',
  getParentRoute: () => rootRouteImport,
} as any)
const DownloadRoute = DownloadRouteImport.update({
  id: '/download',
  path: '/download',
  getParentRoute: () => rootRouteImport,
} as any)
const ClientSetupRoute = ClientSetupRouteImport.update({
  id: '/client-setup',
  path: '/client-setup',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const PasswordIndexRoute = PasswordIndexRouteImport.update({
  id: '/password/',
  path: '/password/',
  getParentRoute: () => rootRouteImport,
} as any)
const PasswordSentRoute = PasswordSentRouteImport.update({
  id: '/password/sent',
  path: '/password/sent',
  getParentRoute: () => rootRouteImport,
} as any)
const PasswordFinishRoute = PasswordFinishRouteImport.update({
  id: '/password/finish',
  path: '/password/finish',
  getParentRoute: () => rootRouteImport,
} as any)
const OpenidCallbackRoute = OpenidCallbackRouteImport.update({
  id: '/openid/callback',
  path: '/openid/callback',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/client-setup': typeof ClientSetupRoute
  '/download': typeof DownloadRoute
  '/enrollment-start': typeof EnrollmentStartRoute
  '/password-reset': typeof PasswordResetRoute
  '/session-end': typeof SessionEndRoute
  '/test': typeof TestRoute
  '/openid/callback': typeof OpenidCallbackRoute
  '/password/finish': typeof PasswordFinishRoute
  '/password/sent': typeof PasswordSentRoute
  '/password': typeof PasswordIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/client-setup': typeof ClientSetupRoute
  '/download': typeof DownloadRoute
  '/enrollment-start': typeof EnrollmentStartRoute
  '/password-reset': typeof PasswordResetRoute
  '/session-end': typeof SessionEndRoute
  '/test': typeof TestRoute
  '/openid/callback': typeof OpenidCallbackRoute
  '/password/finish': typeof PasswordFinishRoute
  '/password/sent': typeof PasswordSentRoute
  '/password': typeof PasswordIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/client-setup': typeof ClientSetupRoute
  '/download': typeof DownloadRoute
  '/enrollment-start': typeof EnrollmentStartRoute
  '/password-reset': typeof PasswordResetRoute
  '/session-end': typeof SessionEndRoute
  '/test': typeof TestRoute
  '/openid/callback': typeof OpenidCallbackRoute
  '/password/finish': typeof PasswordFinishRoute
  '/password/sent': typeof PasswordSentRoute
  '/password/': typeof PasswordIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/client-setup'
    | '/download'
    | '/enrollment-start'
    | '/password-reset'
    | '/session-end'
    | '/test'
    | '/openid/callback'
    | '/password/finish'
    | '/password/sent'
    | '/password'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/client-setup'
    | '/download'
    | '/enrollment-start'
    | '/password-reset'
    | '/session-end'
    | '/test'
    | '/openid/callback'
    | '/password/finish'
    | '/password/sent'
    | '/password'
  id:
    | '__root__'
    | '/'
    | '/client-setup'
    | '/download'
    | '/enrollment-start'
    | '/password-reset'
    | '/session-end'
    | '/test'
    | '/openid/callback'
    | '/password/finish'
    | '/password/sent'
    | '/password/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ClientSetupRoute: typeof ClientSetupRoute
  DownloadRoute: typeof DownloadRoute
  EnrollmentStartRoute: typeof EnrollmentStartRoute
  PasswordResetRoute: typeof PasswordResetRoute
  SessionEndRoute: typeof SessionEndRoute
  TestRoute: typeof TestRoute
  OpenidCallbackRoute: typeof OpenidCallbackRoute
  PasswordFinishRoute: typeof PasswordFinishRoute
  PasswordSentRoute: typeof PasswordSentRoute
  PasswordIndexRoute: typeof PasswordIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/test': {
      id: '/test'
      path: '/test'
      fullPath: '/test'
      preLoaderRoute: typeof TestRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/session-end': {
      id: '/session-end'
      path: '/session-end'
      fullPath: '/session-end'
      preLoaderRoute: typeof SessionEndRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/password-reset': {
      id: '/password-reset'
      path: '/password-reset'
      fullPath: '/password-reset'
      preLoaderRoute: typeof PasswordResetRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/enrollment-start': {
      id: '/enrollment-start'
      path: '/enrollment-start'
      fullPath: '/enrollment-start'
      preLoaderRoute: typeof EnrollmentStartRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/download': {
      id: '/download'
      path: '/download'
      fullPath: '/download'
      preLoaderRoute: typeof DownloadRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/client-setup': {
      id: '/client-setup'
      path: '/client-setup'
      fullPath: '/client-setup'
      preLoaderRoute: typeof ClientSetupRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/password/': {
      id: '/password/'
      path: '/password'
      fullPath: '/password'
      preLoaderRoute: typeof PasswordIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/password/sent': {
      id: '/password/sent'
      path: '/password/sent'
      fullPath: '/password/sent'
      preLoaderRoute: typeof PasswordSentRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/password/finish': {
      id: '/password/finish'
      path: '/password/finish'
      fullPath: '/password/finish'
      preLoaderRoute: typeof PasswordFinishRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/openid/callback': {
      id: '/openid/callback'
      path: '/openid/callback'
      fullPath: '/openid/callback'
      preLoaderRoute: typeof OpenidCallbackRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ClientSetupRoute: ClientSetupRoute,
  DownloadRoute: DownloadRoute,
  EnrollmentStartRoute: EnrollmentStartRoute,
  PasswordResetRoute: PasswordResetRoute,
  SessionEndRoute: SessionEndRoute,
  TestRoute: TestRoute,
  OpenidCallbackRoute: OpenidCallbackRoute,
  PasswordFinishRoute: PasswordFinishRoute,
  PasswordSentRoute: PasswordSentRoute,
  PasswordIndexRoute: PasswordIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
