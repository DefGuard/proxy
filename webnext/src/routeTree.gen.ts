/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as TestRouteImport } from './routes/test'
import { Route as EnrollmentStartRouteImport } from './routes/enrollment-start'
import { Route as DownloadRouteImport } from './routes/download'
import { Route as ClientSetupRouteImport } from './routes/client-setup'
import { Route as IndexRouteImport } from './routes/index'
import { Route as PasswordIndexRouteImport } from './routes/password/index'
import { Route as PasswordSentRouteImport } from './routes/password/sent'
import { Route as PasswordFormIndexRouteImport } from './routes/password/form/index'
import { Route as PasswordFormFinishRouteImport } from './routes/password/form/finish'

const TestRoute = TestRouteImport.update({
  id: '/test',
  path: '/test',
  getParentRoute: () => rootRouteImport,
} as any)
const EnrollmentStartRoute = EnrollmentStartRouteImport.update({
  id: '/enrollment-start',
  path: '/enrollment-start',
  getParentRoute: () => rootRouteImport,
} as any)
const DownloadRoute = DownloadRouteImport.update({
  id: '/download',
  path: '/download',
  getParentRoute: () => rootRouteImport,
} as any)
const ClientSetupRoute = ClientSetupRouteImport.update({
  id: '/client-setup',
  path: '/client-setup',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const PasswordIndexRoute = PasswordIndexRouteImport.update({
  id: '/password/',
  path: '/password/',
  getParentRoute: () => rootRouteImport,
} as any)
const PasswordSentRoute = PasswordSentRouteImport.update({
  id: '/password/sent',
  path: '/password/sent',
  getParentRoute: () => rootRouteImport,
} as any)
const PasswordFormIndexRoute = PasswordFormIndexRouteImport.update({
  id: '/password/form/',
  path: '/password/form/',
  getParentRoute: () => rootRouteImport,
} as any)
const PasswordFormFinishRoute = PasswordFormFinishRouteImport.update({
  id: '/password/form/finish',
  path: '/password/form/finish',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/client-setup': typeof ClientSetupRoute
  '/download': typeof DownloadRoute
  '/enrollment-start': typeof EnrollmentStartRoute
  '/test': typeof TestRoute
  '/password/sent': typeof PasswordSentRoute
  '/password': typeof PasswordIndexRoute
  '/password/form/finish': typeof PasswordFormFinishRoute
  '/password/form': typeof PasswordFormIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/client-setup': typeof ClientSetupRoute
  '/download': typeof DownloadRoute
  '/enrollment-start': typeof EnrollmentStartRoute
  '/test': typeof TestRoute
  '/password/sent': typeof PasswordSentRoute
  '/password': typeof PasswordIndexRoute
  '/password/form/finish': typeof PasswordFormFinishRoute
  '/password/form': typeof PasswordFormIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/client-setup': typeof ClientSetupRoute
  '/download': typeof DownloadRoute
  '/enrollment-start': typeof EnrollmentStartRoute
  '/test': typeof TestRoute
  '/password/sent': typeof PasswordSentRoute
  '/password/': typeof PasswordIndexRoute
  '/password/form/finish': typeof PasswordFormFinishRoute
  '/password/form/': typeof PasswordFormIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/client-setup'
    | '/download'
    | '/enrollment-start'
    | '/test'
    | '/password/sent'
    | '/password'
    | '/password/form/finish'
    | '/password/form'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/client-setup'
    | '/download'
    | '/enrollment-start'
    | '/test'
    | '/password/sent'
    | '/password'
    | '/password/form/finish'
    | '/password/form'
  id:
    | '__root__'
    | '/'
    | '/client-setup'
    | '/download'
    | '/enrollment-start'
    | '/test'
    | '/password/sent'
    | '/password/'
    | '/password/form/finish'
    | '/password/form/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ClientSetupRoute: typeof ClientSetupRoute
  DownloadRoute: typeof DownloadRoute
  EnrollmentStartRoute: typeof EnrollmentStartRoute
  TestRoute: typeof TestRoute
  PasswordSentRoute: typeof PasswordSentRoute
  PasswordIndexRoute: typeof PasswordIndexRoute
  PasswordFormFinishRoute: typeof PasswordFormFinishRoute
  PasswordFormIndexRoute: typeof PasswordFormIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/test': {
      id: '/test'
      path: '/test'
      fullPath: '/test'
      preLoaderRoute: typeof TestRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/enrollment-start': {
      id: '/enrollment-start'
      path: '/enrollment-start'
      fullPath: '/enrollment-start'
      preLoaderRoute: typeof EnrollmentStartRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/download': {
      id: '/download'
      path: '/download'
      fullPath: '/download'
      preLoaderRoute: typeof DownloadRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/client-setup': {
      id: '/client-setup'
      path: '/client-setup'
      fullPath: '/client-setup'
      preLoaderRoute: typeof ClientSetupRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/password/': {
      id: '/password/'
      path: '/password'
      fullPath: '/password'
      preLoaderRoute: typeof PasswordIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/password/sent': {
      id: '/password/sent'
      path: '/password/sent'
      fullPath: '/password/sent'
      preLoaderRoute: typeof PasswordSentRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/password/form/': {
      id: '/password/form/'
      path: '/password/form'
      fullPath: '/password/form'
      preLoaderRoute: typeof PasswordFormIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/password/form/finish': {
      id: '/password/form/finish'
      path: '/password/form/finish'
      fullPath: '/password/form/finish'
      preLoaderRoute: typeof PasswordFormFinishRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ClientSetupRoute: ClientSetupRoute,
  DownloadRoute: DownloadRoute,
  EnrollmentStartRoute: EnrollmentStartRoute,
  TestRoute: TestRoute,
  PasswordSentRoute: PasswordSentRoute,
  PasswordIndexRoute: PasswordIndexRoute,
  PasswordFormFinishRoute: PasswordFormFinishRoute,
  PasswordFormIndexRoute: PasswordFormIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
